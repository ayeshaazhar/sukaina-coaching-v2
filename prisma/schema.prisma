// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings     Booking[]
  testimonials Testimonial[]
  blogPosts    BlogPost[]

  @@map("users")
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  subjects    String[]
  levels      String[]
  price       Float
  duration    Int // in minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings Booking[]

  @@map("services")
}

model Booking {
  id        String        @id @default(cuid())
  userId    String
  serviceId String
  status    BookingStatus @default(PENDING)
  
  // Session details
  scheduledAt DateTime
  duration    Int // in minutes
  notes       String?
  
  // Contact info
  studentName String
  email       String
  phone       String?
  subject     String
  level       String
  message     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@map("bookings")
}

model Testimonial {
  id        String   @id @default(cuid())
  userId    String?
  name      String
  role      String
  content   String
  rating    Int      @default(5)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("testimonials")
}

model BlogPost {
  id          String   @id @default(cuid())
  authorId    String
  title       String
  slug        String   @unique
  description String
  content     String
  category    String
  tags        String[]
  image       String?
  readTime    String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id])

  @@map("blog_posts")
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    String   @default("NEW")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_submissions")
}

enum Role {
  STUDENT
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
